""" VIM CONFIG {{{
""" MISC EDITOR BEHAVIOR {{{
" accommodate nvim with the same config under ~/.vim
if has('nvim')
  set runtimepath^=$HOME/.vim runtimepath+=$HOME/.vim/after
  let &packpath = &runtimepath
endif

" use matchit
packadd! matchit

" use Unicode
set encoding=utf-8

" make Vim detect filetypes and apply filetype plugin and indent files
filetype plugin indent on

" enable syntax highlighting
syntax enable

" allow Vim to hide modified buffers without abandoning them
set hidden

" delete comment characters when joining lines
set formatoptions+=j

" remove timeout on mappings but keep them for key codes
" to remove timeout from mapleader but avoid breaking <ESC> codes
set notimeout
set ttimeout
set ttimeoutlen=50

" make Vim use ripgrep for :grep
set grepprg=rg\ --vimgrep\ --no-heading

" change characters used to fill vsplit separator and folds
set fillchars=fold:\ ,diff:-

" display trailing whitespace and line continuations in list mode
set listchars=trail:_,extends:>,precedes:<,tab:>-

" disallow octal detection for <C-a>/<C-x>
set nrformats-=octal

" make Vim use vsplits for diff mode
set diffopt+=vertical

" make Vim use patience algorithm for diffing
set diffopt+=algorithm:patience
""" MISC EDITOR BEHAVIOR }}}

""" STATUSLINE BEHAVIOR {{{
" make Vim display the statusline at all times
" but the tabline only when necessary
set laststatus=2
set showtabline=1

" define statusline items
set statusline=
" filename
set statusline+=%*%{statusline#bufnameshort()}
" window type (help, preview, qlist)
set statusline+=%*%h%w
" modified flag
set statusline+=%3*%m
" readonly flag
set statusline+=%1*%r
" midline separator
set statusline+=%=
" background job flag
set statusline+=%4*%{statusline#bg()}
" quickfix flag
set statusline+=%3*%{statusline#loclist()}%{statusline#quickfix()}
""" END STATUSLINE BEHAVIOR }}}

""" WINDOW BEHAVIOR {{{
" make Vim add new vertical splits to the right
" and new horizontal splits below
set splitright
set splitbelow
""" END WINDOW BEHAVIOR }}}

""" TEMP FILES BEHAVIOR {{{
" make Vim save swapfiles, backups, and undofiles in .vim
" so I can make use of them without cluttering the working directory
set swapfile
set backup
set undofile
set directory=~/.vim/tmp//,.
set backupdir=~/.vim/tmp//,.
set undodir=~/.vim/tmp//,.
""" END TEMP FILES BEHAVIOR }}}

""" COLORS {{{
" set the colorscheme
colorscheme highlight
""" END COLORS }}}

""" INDENT BEHAVIOR {{{
" set up indents to use 2 spaces
set shiftwidth=2

" set up <Tab> to insert an indent instead of a tab character
" this relies on the value of shiftwidth
set softtabstop=-1
set expandtab

" make <Tab> insert an indent (shiftwidth) when at the start of a line
" and a tab character elsewhere (tabstop/softtabstop)
" my softabstop is set up to rely on shiftwidth so this may seem superfluous
" but there may be times I'd want to change tab settings locally
set smarttab

" make tab characters display as 8 characters wide
set tabstop=8

" make Vim auto indent when typing new lines
set autoindent
""" END INDENT BEHAVIOR }}}

""" SEARCH BEHAVIOR {{{
" allow incremental search
set incsearch

" highlight search results
set hlsearch

" make search case sensitive for queries with capital letters
" but case insensitive for everything else
set ignorecase
set smartcase
""" END SEARCH BEHAVIOR }}}

""" COMPLETION BEHAVIOR {{{
" disallow preview during completion
set completeopt&
set completeopt-=preview
""" END COMPLETION BEHAVIOR }}}

""" COMMAND LINE BEHAVIOR {{{
" display commands below the statusline
set showcmd

" disallow ruler below the statusline for when I have statusline disabled
set noruler

" display tab completions for command line
set wildmenu

" partial-complete before displaying wildmenu, then cycle through options
set wildmode=list:full,full

" ignore case when completing files
set wildignorecase

" limit command history
set history=100

" abbreviate commandline messages as much as possible
" to help avoid hit-enter prompts
set shortmess=atoO
if has('patch-8.1.1270')
  set shortmess+=S
endif

" make Vim use history recall even for <C-n>/<C-p>
" since they're easier to hit than the arrow keys
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" map key to clear args but leave command behind
cnoremap <C-k> <C-\>eget(split(getcmdline()), 0, '')<CR><Space>
""" END COMMAND LINE BEHAVIOR }}}

""" TERMINAL MODE BEHAVIOR {{{
" map a key to quickly quit the terminal buffer, disregarding the running job
tnoremap <C-w>q <C-w>:bd!<CR>
""" END TERMINAL MODE BEHAVIOR }}}

""" NORMAL MODE BEHAVIOR {{{
" map a key to quickly close a tab
nnoremap ZT :tabclose<CR>

" map Y to y$, to be similar to D and C
nnoremap Y y$

" map <BS> to switch to the alternate buffer
nnoremap <BS> <C-^>

" swap g] and g<C-]>
" since g<C-]> jumps immediately if there is just one tag, which I want
" but g] is easier to press
nnoremap g] g<C-]>
nnoremap g<C-]> g]
nnoremap <C-w>g] <C-w>g<C-]>
nnoremap <C-w>g<C-]> <C-w>g]
""" END NORMAL MODE BEHAVIOR }}}

""" INSERT MODE BEHAVIOR {{{
" allow <BS> to delete the following special characters
set backspace=indent,eol,start

" map <C-@> to nop, so I can use it as my Insert mode leader
" this byte is sent by both <C-2> and <C-Space>
inoremap <C-@> <nop>

" map keys to quickly insert dates and times
inoremap <C-@>d <C-r>=strftime('%F')<CR>
inoremap <C-@>t <C-r>=strftime('%R')<CR>
inoremap <C-@>i <C-r>=strftime('%FT%T%z')<CR>
inoremap <C-@>y <C-r>=strftime('%a')<CR>
inoremap <C-@>n <C-r>=localtime()<CR>
""" END INSERT MODE BEHAVIOR }}}

""" VISUAL MODE BEHAVIOR {{{
" make the <> indent commands preserve the highlighted visual block
xnoremap > >gv
xnoremap < <gv
""" END VISUAL MODE BEHAVIOR }}}

""" CROSS-MODE MAPS {{{
" unmap <Space> so it doesn't move to the right when I press <Leader>
" since I have <Space> as <Leader>
nnoremap <Space> <nop>
xnoremap <Space> <nop>

" map keys for changing with cgn
nnoremap <silent> gz :set operatorfunc=visual_op#maps#Cgn<CR>g@
xmap gz <Plug>SearchInPlacecgn

" map keys to expand my own system of snippets
" add both <C-Space><C-Space> and <C-Space><C-Space>, to cover errors
imap <C-@><Space> <Plug>SnipletExpand
imap <C-@><C-@> <Plug>SnipletExpand
cmap <C-@><Space> <Plug>SnipletExpand
cmap <C-@><C-@> <Plug>SnipletExpand
""" END CROSS-MODE MAPS }}}

""" COMMANDS {{{
" define a command for splitting a statement with a ternary operator
command! -nargs=0 SplitTernary
  \ silent execute
  \ "normal! 0f?i\<CR>\<Esc>f:i\<CR>\<Esc>Vkk:keeppatterns s/\s\+$//e\<CR>"
command! -nargs=0 SplitWrapperXML
  \ silent execute "normal! ^f>a\<CR>\<Esc>$F<i\<CR>\<Esc>"

" define commands to post to pastebins
command! -nargs=0 -range Sprunge
  \ <line1>,<line2>w ! curl -F "sprunge=<-" http://sprunge.us
command! -nargs=0 -range Ixio
  \ <line1>,<line2>w ! curl -F "f:1=<-" http://ix.io

" define commands to run native functions with AsyncDo
command! -bang -nargs=* -complete=file Make
  \ call asyncdo#run(1, &makeprg, <f-args>)
command! -bang -nargs=* -complete=file LMake
  \ call asyncdo#lrun(1, &makeprg, <f-args>)
command! -bang -nargs=+ -complete=file Grep
  \ call asyncdo#run(1, {'job': &grepprg, 'errorformat': &grepformat}, <f-args>)
""" END COMMANDS }}}

""" LEADER KEY BEHAVIOR {{{
" change Leader key to Spacebar, since \ is too hard to reach
let mapleader = "\<Space>"

" map a key to reset search text
nnoremap <Leader><Leader> :nohlsearch<CR>

" map keys for Fugitive
nnoremap <Leader>gs :tab Git<CR>
nnoremap <Leader>ga :Gwrite<CR>
nnoremap <Leader>gc :Gcommit --verbose<CR>
nnoremap <Leader>gm :Gmerge<CR>
nnoremap <Leader>gb :Git blame <bar> ToggleLineBind<CR>
nnoremap <Leader>gl :Gllog -- %<CR><CR><CR>
nnoremap <Leader>gL :Gllog<CR><CR><CR>

" map keys for FZF
nnoremap <Leader>fp :Files<CR>
nnoremap <Leader>fb :Buffers<CR>

" map keys for useful native Vim functions
nnoremap <Leader>vv :source $MYVIMRC<CR>
nnoremap <Leader>vp :packadd<Space>
" edit with no parameters is useful for reloading a buffer
nnoremap <Leader>vr :edit<CR>
nnoremap <Leader>vff :filetype detect<CR>
nnoremap <Leader>vft :set filetype=
nnoremap <Leader>vt :vert term<Space>
nnoremap <Leader>vdd :setlocal foldmethod=
nnoremap <Leader>vds :setlocal foldmethod=syntax<CR>
nnoremap <Leader>vdk :setlocal foldmethod=marker<CR>
nnoremap <Leader>vdm :setlocal foldmethod=manual<CR>

" map keys for quick-buffer
nnoremap <Leader>b :B<Space>

" map keys for quickfix and loc lists
nmap <Leader>qq <Plug>(qf_qf_toggle)
nmap <Leader>ql <Plug>(qf_loc_toggle)
nnoremap <Leader>q<Leader>q :QfUnmarkAll<CR>

" map keys for search
nmap <Leader>h <Plug>SearchInPlace
xmap <Leader>h <Plug>SearchInPlace
nmap <Leader>G <Plug>GrepStar
xmap <Leader>G <Plug>GrepStar

" map key for searching same-indent blocks
nnoremap <Leader>i 0yiw/^<C-r>"\S/e<CR>

" map a key to trigger ArgWrap
nnoremap <Leader>a :ArgWrap<CR>

" map keys for AsyncDo
nnoremap <Leader>rr :AsyncDo<Space>
nnoremap <Leader>rm :Make<Space>
nnoremap <Leader>rg :Grep<Space>

" map keys for Makery.vim
nnoremap <Leader>ml :LMlint %<CR>
nnoremap <Leader>mg :Mtags<CR>
nnoremap <Leader>mt :Mtest<CR>
nnoremap <Leader>mb :Mbuild<CR>

" map keys for Vim-Slime
xmap <Leader>s <Plug>SlimeRegionSend
nmap <Leader>s <Plug>SlimeMotionSend
nmap <Leader>ss <Plug>SlimeLineSend
""" END LEADER KEY BEHAVIOR }}}
""" END VIM CONFIG }}}

""" PLUGIN CONFIG {{{
""" FZF {{{
" use down layout explicitly
let g:fzf_layout = { 'down': '40%' }
""" END FZF }}}

""" NETRW {{{
" disallow Netrw from setting the alternate buffer
" to ensure that <C-^> always lands on a file buffer not a dir
let g:netrw_altfile = 1

" disallow Netrw from displaying its banner
let g:netrw_banner = 0
""" END NETRW }}}

""" FUGITIVE.VIM {{{
" disallow Fugitive.vim from highlighting commit hashes in blames
let g:fugitive_dynamic_colors = 0
""" END FUGITIVE.VIM }}}

""" VIM-QF {{{
" disallow Vim-QF from automatically resizing quickfix and location windows
let g:qf_auto_resize = 0

" disallow Vim-QF from automatically opening quickfix and location windows
let g:qf_auto_open_quickfix = 0
let g:qf_auto_open_loclist = 0

" make :Keep and friends match buffer name only
let g:qf_bufname_or_text = 1
""" END VIM-QF }}}

""" VIMWIKI {{{
" use Dropbox for default vimwiki
let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki'}]

" allow VimWiki to fold sections and code blocks
let g:vimwiki_folding = 'expr'
""" END VIMWIKI }}}

""" VIM-ARGWRAP {{{
" make ArgWrap add tail commas when working with [] or {}
let g:argwrap_tail_comma_braces = '[{'
""" END VIM-ARGWRAP }}}

""" EMMET.VIM {{{
" make Emmet.vim set only <Plug> mappings
" since I only ever use the expand and the next/prev mappings
let g:emmet_install_only_plug = 1
""" END EMMET.VIM }}}

""" AUTO-PAIRS {{{
" disallow AutoPairs from jumping to closing brackets on the next line
let g:AutoPairsMultilineClose = 0

" disable certain pairs when in Lisp files, especially quote (')
augroup AutoPairs
  autocmd!
  autocmd FileType lisp let b:AutoPairs = {'(': ')', '"': '"'}
augroup END
""" END AUTO-PAIRS }}}

""" VIM-TMUX-NAVIGATOR {{{
" disallow tmux-navigator's default navigation keys
" I set my own keys in after/plugin/tmux_navigator.vim
let g:tmux_navigator_no_mappings = 1
""" END VIM-TMUX-NAVIGATOR }}}

""" VIM-SLIME {{{
" make vim-slime work with tmux panes by default
" guard for tmux
if !empty($TMUX)
  let g:slime_target = "tmux"
  let g:slime_default_config = {
    \ "socket_name": split($TMUX, ",")[0],
    \ "target_pane": ":.1"
    \ }
  let g:slime_dont_ask_default = 1
endif

" unset vim-slime's default emacs bindings
" My own maps are in the VIM CONFIG section, under LEADER KEY BEHAVIOR
let g:slime_no_mappings = 1
""" END VIM-SLIME }}}

""" VIM-TABLE-MODE {{{
" make tables bitbucket-markdown-compatible
let g:table_mode_corner = '|'
let g:table_mode_corner_corner = '|'
let g:table_mode_header_fillchar = '-'

" disallow vim-table-mode from automatically aligning every now and then
let g:table_mode_auto_align = 0

" disallow vim-table-mode from mapping over []{} motions
let g:table_mode_motion_up_map = '<Leader>{<Bar>'
let g:table_mode_motion_down_map = '<Leader>}<Bar>'
let g:table_mode_motion_left_map = '<Leader>[<Bar>'
let g:table_mode_motion_right_map = '<Leader>]<Bar>'
""" END VIM-TABLE-MODE }}}

""" VIM-MARKDOWN {{{
" allow default markdown syntax file to recognize fenced languages
let g:markdown_fenced_languages = ['typescript', 'javascript', 'json']
""" END VIM-MARKDOWN }}}

""" VIM-JAVASCRIPT {{{
" allow highlighting JSDocs within comments
let g:javascript_plugin_jsdoc = 1
""" END VIM-JAVASCRIPT }}}

""" VIM-JSX {{{
" allow Vim-JSX to work even without a .jsx extension
let g:jsx_ext_required = 0
""" END VIM-JSX }}}

""" VIM-VUE {{{
" disallow vim-vue from doing multiple regex checks for pre-processors
" for performance
let g:vue_pre_processors = ['pug']
""" END VIM-VUE }}}

""" VIM-TEMPLATE-LITE {{{
" declare mappings of patterns to templates to load
let g:template_lite_mappings = {
  \  '*.component.js': 'react-native/component.js',
  \  '*.hoc.js': 'react-native/hoc.js',
  \  '*.container.js': 'react-native/container.js',
  \  '*.styles.js': 'react-native/styles.js',
  \  '*.redux.js': 'react-native/redux.js',
  \  '*.fire.js': 'react-native/fire.js',
  \  '*.component.jsx': 'react/component.jsx',
  \  '*.hoc.jsx': 'react/hoc.jsx',
  \  '*.component.ts': 'angular/component.ts',
  \  '*.vue': 'vue/component.vue',
  \  '*.sh': 'sh.sh',
  \  'PKGBUILD': 'PKGBUILD',
  \  '~/Dropbox/vimwiki/diary/*.wiki': 'diary.wiki',
  \  '~/Games/nethack/load/*': 'nethackrc',
  \  '*.spec.js': 'jest/component.spec.js'
  \}

" trigger vim-abolish on template load
augroup TemplatesVim
  autocmd!

  " replace skeleton-name with filename
  autocmd User TemplateLoad silent! execute
        \ "%S/skeleton-name/" . path#remove_extension(expand('%:t')) . "/g"
  " replace skeleton-dir with dirname
  autocmd User TemplateLoad silent! execute
        \ "%S/skeleton-dir/" . expand('%:p:h:t') . "/g"
  " replace skeleton-day with current day of week
  autocmd User TemplateLoad silent! %s/skeleton-day/\=strftime('%a')/g
  " replace skeleton-date with provided date format
  autocmd User TemplateLoad silent!
        \ %s/skeleton-date{\(.\{-}\)}/\=strftime(submatch(1))/g
augroup END
""" END VIM-TEMPLATE-LITE }}}
""" END PLUGIN CONFIG }}}

" vim:fdm=marker
